@model Filmiverse.Models.MovieViewModel

@{
    ViewBag.Title = "Add Movie";
}

<h2>Create</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Movie</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Producer, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Producer, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Producer, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Actors, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <table id="actorTable" border="0" cellspacing="2">
                    <tr>
                        <td>
                            @Html.EditorFor(model => model.Actors[0], new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Actors[0], "", new { @class = "text-danger" })
                        </td>
                    </tr>
                </table>
                <div>
                    @{var actorlist = "";
                    }

                    @Html.ActionLink("Add", "Edit", new { id = 0, type = "Add", actors = actorlist })
                    @Html.ActionLink("Delete", "Edit", new { id = 0, type = "Delete", actors = actorlist })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.YearOfRelease, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.YearOfRelease, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.YearOfRelease, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RunningTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RunningTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RunningTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Plot, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Plot, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Plot, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Poster, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.HiddenFor(model => model.Poster)
            @if (Model?.Poster != null)
                {
                    var base64 = Convert.ToBase64String(Model.Poster);
                    var imgSrc = String.Format("data:image/gif;base64,{0}", base64);
                <div class="col-md-10">
                    <img src='@imgSrc' class="thumb-image" />
                </div>
            }

            <div style="position:relative;float:right;">
                Choose new poster:
                <input type="file" id="imgUpload" name="imgUpload" accept="image/*" />
                <div id="image-holder"></div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
                                }

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


@section Scripts {
    <link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jquery")
    <script src="http://code.jquery.com/jquery-1.10.2.js"></script>
    <script src="http://code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            $("#Producer").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "/Producers/Index",
                        type: "POST",
                        dataType: "json",
                        data: { Prefix: request.term },
                        success: function (data) {
                            response($.map(data, function (producer) {
                                return { label: producer, value: producer };
                            }))
                        }
                    })
                }
            });

            $('#actorTable input:text').autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "/Actors/Index",
                        type: "POST",
                        dataType: "json",
                        data: { Prefix: request.term },
                        success: function (data) {
                            response($.map(data, function (actor) {
                                return { label: actor, value: actor };
                            }))
                        }
                    })
                }
            });

            $("#imgUpload").on('change', function () {
                if (typeof (FileReader) != "undefined") {
                    var image_holder = $("#image-holder");
                    image_holder.empty();

                    var reader = new FileReader();
                    reader.onload = function (e) {
                        $("<img />", {
                            "src": e.target.result,
                            "class": "thumb-image"
                        }).appendTo(image_holder);
                    }

                    image_holder.show();
                    reader.readAsDataURL($(this)[0].files[0]);
                } else {
                    alert("This browser does not support FileReader.");
                }
            });

            $('#addActor').click(function () {
                var i = 0;
                $('#actorTable tr').each(function () {
                    i = i + 1;
                });
                //add a row with input text for Actors in table at the end
                $('#actorTable').append('<tr><td> <input type="text" id="Actors[' + i + ']" /></td></tr>');
            });
            $('#delActor').click(function () {
                var i = 0;
                $('#actorTable tr').each(function () {
                    i = i + 1;
                });

                //delete a row with input text for Actors in table if there is more than one Actor only
                if (i > 1) {
                    $('#actorTable').find('input:text').last().closest('tr').remove();
                }
            });
        });
    </script>
}
